
#################################### Prompt to add Introscope property and its value ###########################################
#- name: Introscope property and Extension Add.
#  block:
#    - pause:
#        prompt: "Do you want to add CA APM EM url ('agentManager.url.1') (Y/N) ? -->  On Selection of 'No' it will take already exists url(localhost:8080 for fresh installation)"
#      register: interscope_property
#      run_once: true
#      until: interscope_property.user_input|lower is search( '^yes$|^y$|^no$|^n' )
#    - pause:
#        prompt: "Enter value for 'agentManager.url.1' followed by port number (for example:- http://example.com:8081 or example.com:5001)"
#      register: interscope_property_agentmanager_url_1
#      run_once: true
#      when: interscope_property.user_input|lower == "yes" or interscope_property.user_input|lower == "y"
#    - name: Setting interoscope_property_agentmanager_url_1 variable
#      set_fact:
#         interscope_property_agentmanager_url_1: "{{ interscope_property_agentmanager_url_1.user_input }}"
#      when: interscope_property.user_input|lower == "yes" or interscope_property.user_input|lower == "y"
#      run_once: true
###################################################################################################################################

####################################### Prompt to add Extensions and its value #####################################################
#    - pause:
#        prompt: "Do you want to update extensions ? (Y/N)"
#      register: enable_disable_extension
#      run_once: true
#      until: enable_disable_extension.user_input|lower is search( '^yes$|^y$|^no$|^n' )

#    - pause:
#        prompt: Do you want to enable '{{ item }}' extension (Y/N) ?
#      register: extension
#      with_lines: cat "{{ playbook_dir }}/user_input/extension.cnf"
#      run_once: true
#      when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' )
#      until: extension.user_input|lower is search( '^yes$|^y$|^no$|^n' )

#    - name: Setting extension_values variable
#      set_fact:
#         extension_values: "{{ extension.results | selectattr('user_input', 'match', '^yes$|^y$|^Y$|^Yes$|^YES') | map(attribute='item') | list | join(',') }}"
#      run_once: true
#      when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' )
#################################################################################################################################################
######################################################## Extra Property ############################################################
#- name: Extra properties
#  block:
#    - pause:
#        prompt: "Do you want to configure other properties i.e. aws accessKey, docker configuration etc ? (Y/N)"
#      register: interscope_property_extra
#      run_once: true
#      until: interscope_property_extra.user_input|lower is search( '^yes$|^y$|^no$|^n' )
 #   - pause:
 #       prompt: "Enter properties and its value with -D in format '-Dcom.ca.apm.agent.aws.accessKey=xyz' without quotes"
#      register: interscope_property_extra_value
#      run_once: true
#      when: interscope_property_extra.user_input|lower is search( '^yes$|^y$' )
#    - name: Setting interoscope_property__extra_value variable
#      set_fact:
#         interscope_property_extra_value: "{{ interscope_property_extra_value.user_input }}"
#      run_once: true
#      when: interscope_property_extra.user_input|lower is search( '^yes$|^y$' )
#    - name: Setting interoscope_property__extra_value variable
 #     set_fact:
  #       interscope_property_extra_value: ""
  #    run_once: true
  #    when: interscope_property_extra.user_input|lower is search( '^no$|^n$' )
####################################################################################################################################

################# Tasks of force start for windows machine ##########################################
- name: for Windows
  block:
   # - name: Setting interoscope_property__extra_value variable
   #   set_fact:
   #      interscope_property_extra_value: "{{interscope_property_extra_value|replace('=','_')}}"
   #   when: interscope_property_extra_value != ""

    - name: Creating installation directory, if it is not present
      win_file:
        path: "{{ path_win }}"
        state: directory

    - name: Checking whether master installer script present or not
      win_stat:
        path: "{{ path_win }}\\apmia\\APMIACtrl.bat"
      register: st_win_script

    - name: Removing apmia folder (if Empty)
      win_file:
        state: absent
        path: "{{ path_win }}\\apmia"
      register: removed_empty_dir
      when: st_win_script.stat.exists == false
   
    # Coping compressed bundle to remote machine
    - name: Get zip file name
      find:
        paths: "roles/apmia_role/files/windows/"
        patterns: '*.zip'
      register: found_files
      delegate_to: localhost

    - name: Copying zip of apmia to remote machine
      win_copy:
        src: "{{ found_files.files[0].path }}"
        dest: "{{ path_win }}\\"
      register: win_copy
      when: st_win_script.stat.exists == false and found_files.matched != 0

    - name: Extracting zip of apmia to  Remote Machine
      win_unzip:
        src: "{{ path_win }}\\{{ found_files.files[0].path | win_basename }}"
        dest: "{{ path_win }}\\"
        delete_archive: yes
      when: st_win_script.stat.exists == false and found_files.matched != 0

    - name: Checking whether master installer script present or not
      win_stat:
        path: "{{ path_win }}\\apmia\\APMIACtrl.bat"
      register: st_win_script

    - set_fact:
         found_files: '{"matched": "1"}'
      when: st_win_script.stat.exists == true
    - set_fact:
         found_files: "{{ found_files | from_json }}"
      when: st_win_script.stat.exists == true

    - name: Starting APMIA with Force_start
      win_command: APMIACtrl.bat status
      args:
        chdir: "{{ path_win }}\\apmia\\"
      register: apmia_service_status
      failed_when: false
      when: st_win_script.stat.exists == true


    - name: Checking Status of apmia directory
      win_stat:
        path: "{{ path_win }}\\apmia"
      register: st_win_dir
      when: found_files.matched != 0

   # ############################# Adding 'agentManager.url.1' value to IntroscopeAgent.profile ############################
   # - win_lineinfile:
   #     path: "{{ path_win }}\\apmia\\core\\config\\IntroscopeAgent.profile"
   #     regexp: '^agentManager.url.1='
   #     line: "agentManager.url.1={{ interscope_property_agentmanager_url_1 }}"
   #     backup: yes
   #   register: agentmanager_url_1_changed
    #  when: interscope_property_agentmanager_url_1.skipped is not defined and found_files.matched != 0

    # Print console message on agentManager.url.1 changed
    #- block:
    #    - lineinfile:
    #        path: "{{ playbook_dir }}/msg_temp"
    #        line: "{{ ansible_hostname }} agentManager.url.1 changed to '{{ interscope_property_agentmanager_url_1 }}'"
    #        create: yes
    #      delegate_to: localhost
    #      when: agentmanager_url_1_changed is defined and agentmanager_url_1_changed.skipped is not defined
    #  when: interscope_property.user_input|lower == "yes" and found_files.matched != 0
    #######################################################################################################################
    
    ################################# Adding 'introscope.agent.extensions.bundles.load' value to Extensions.profile ####################
    #- win_lineinfile:
    #    path: "{{ path_win }}/apmia/extensions/Extensions.profile"
    #    regexp: '^introscope.agent.extensions.bundles.load='
     #   line: "introscope.agent.extensions.bundles.load={{ extension_values }}"
     #   backup: yes
     # register: extensions_changed_changed
     # when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' ) and extension_values.skipped is not defined and found_files.matched != 0
    # Print console message on introscope.agent.extensions.bundles.load changed
    #- block:
    #    - block:
    #        - lineinfile:
    #            path: "{{ playbook_dir }}/msg_temp"
    #            line: "{{ ansible_hostname }} You not select any extension so Extension is disabled"
    #            create: yes
    #          delegate_to: localhost
    #          when: extension_values == ""
     #       - lineinfile:
     #           path: "{{ playbook_dir }}/msg_temp"
      #          line: "{{ ansible_hostname }} Extension(s) '{{ extension_values }}' enabled."
       #         create: yes
      #        delegate_to: localhost
      #        when: extension_values != ""
      #    when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' ) and extensions_changed_changed is defined and extensions_changed_changed.skipped is not defined and found_files.matched != 0
    #######################################################################################################################
    # Starting apmia service in force start mode
    - name: Starting APMIA with Force_start
      #win_command: APMIACtrl.bat force_start property="{{ interscope_property_extra_value }}"
      win_command: APMIACtrl.bat force_start
      args:
        chdir: "{{ path_win }}\\apmia\\"
      register: outp_win
      failed_when: false
      when: st_win_script.stat.exists == true
      async: 3
      poll: 1
    #################################################Printing Message for Extra Properties###########################################################
    #- lineinfile:
    #       path: "{{ playbook_dir }}/msg_temp"
    #       line: "{{ ansible_hostname }} Extra property {{ interscope_property_extra_value }} have set"
    #       create: yes
    #  delegate_to: localhost
    #  when:
    #    - found_files.matched != 0
    #    - interscope_property_extra.user_input|lower is search( '^yes$|^y$' )
     #   - interscope_property_extra_value !=""
     #   - outp_win|succeeded
    #####################################################################################################################################

    # Setting output message for report after apmia service start in force start mode
    - set_fact:
         outp_win: '{"stdout": "APM Infrastructure Agent started with force_start."}'
      when: outp_win.stdout is not defined
    - set_fact:
         outp_win: "{{ outp_win | from_json }}"
      when: outp_win.stdout is not defined

    - name: Checking status of apmia directory
      win_stat:
        path: "{{ path_win }}/apmia"
      register: st_win_dir

    # Setting fact to print message, if apmia package is not present
    - set_fact:
         outp_win: '{"stdout": "APMIA zip package is not present in directory files/windows"}'
      when: found_files.matched == 0
    - set_fact:
         outp_win: "{{ outp_win | from_json }}"
      when: found_files.matched == 0
    - set_fact:
         st_win_dir: '{"stat": {"exists": "True"}}'
      when: found_files.matched == 0
    - set_fact:
         st_win_dir: "{{ st_win_dir | from_json }}"
      when: found_files.matched == 0
  when: ansible_os_family == "Windows"
##############################################################################################################

############################## Tasks of force start for Linux machine ###########################################
- name: for linux
  block:

    - name: Creating installation directory, if it is not present
      file:
        path: "{{ path_linux }}"
        state: directory

    # Checking whether apmia directory is blank or some files are there.
    - name: Checking whether apmia master installer script is present or not
      stat:
        path: "{{ path_linux }}/apmia/APMIACtrl.sh"
      register: st_linux_script

    - name: Removing apmia folder (if empty)
      file:
        state: absent
        path: "{{ path_linux }}/apmia"
      register: removed_empty_dir
      when: st_linux_script.stat.exists == false

    # get tar.gz file name
    - name: Get tar.gz file name
      find:
        paths: "roles/apmia_role/files/unix/"
        patterns: '*.tar.gz,tar'
      register: found_files
      delegate_to: localhost

    - name: Extracting tar of apmia to remote machine
      unarchive:
        src: "{{ item }}"
        dest: "{{ path_linux }}"
      with_fileglob:
         - "../files/unix/*.tar.gz"
         - "../files/unix/*.tar"
      when: st_linux_script.stat.exists == false or removed_empty_dir.changed == true and found_files.matched != 0

    - name: Checking whether apmia master installer script is present or not
      stat:
        path: "{{ path_linux }}/apmia/APMIACtrl.sh"
      register: st_linux_script

    - set_fact:
         found_files: '{"matched": "1"}'
      when: st_linux_script.stat.exists == true
    - set_fact:
         found_files: "{{ found_files | from_json }}"
      when: st_linux_script.stat.exists == true

    - name: Calling master installer script to start in force start mode
      shell: ./APMIACtrl.sh status
      args:
        chdir: "{{ path_linux }}/apmia/"
      register: apmia_service_status
      when: st_linux_script.stat.exists == true

    ###### Adding 'agentManager.url.1' value to IntroscopeAgent.profile file ########
    #- lineinfile:
    #    path: "{{ path_linux }}/apmia/core/config/IntroscopeAgent.profile"
    #    regexp: '^agentManager.url.1='
    #    line: "agentManager.url.1={{ interscope_property_agentmanager_url_1 }}"
    #    backup: yes
     # register: agentmanager_url_1_changed
     # when: interscope_property_agentmanager_url_1.skipped is not defined and found_files.matched != 0 and ( 'is running' not in apmia_service_status.stdout or 'CA-SystemEDGE' not in apmia_service_status.stdout )

    # Print console message on agentManager.url.1 changed
    #- block:
    #    - lineinfile:
    #        path: "{{ playbook_dir }}/msg_temp"
    #        line: "{{ ansible_hostname }} 'agentManager.url.1' changed to '{{ interscope_property_agentmanager_url_1 }}'"
     #       create: yes
    #      delegate_to: localhost
    #      when: agentmanager_url_1_changed is defined and agentmanager_url_1_changed.skipped is not defined
    #    - lineinfile:
    #        path: "{{ playbook_dir }}/msg_temp"
    #        line: "{{ ansible_hostname }} 'agentManager.url.1' NOT changed to '{{ interscope_property_agentmanager_url_1 }}' apmia is running."
    #        create: yes
    #      delegate_to: localhost
    #      when: agentmanager_url_1_changed is defined and agentmanager_url_1_changed.skipped is defined
    #  when: interscope_property.user_input|lower == "yes" and found_files.matched != 0
    #################################################################################

    ######### Adding 'introscope.agent.extensions.bundles.load' value to Extensions.profile ########
    #- lineinfile:
    #    path: "{{ path_linux }}/apmia/extensions/Extensions.profile"
    #    regexp: '^introscope.agent.extensions.bundles.load='
    #    line: "introscope.agent.extensions.bundles.load={{ extension_values }}"
    #    backup: yes
    #  register: extensions_changed_changed
    #  when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' ) and extension_values.skipped is not defined and found_files.matched != 0 and 'is running' not in apmia_service_status.stdout and 'CA-SystemEDGE' not in apmia_service_status.stdout

    # Print console message on introscope.agent.extensions.bundles.load changed
    #- block:
    #    - block:
    #        - lineinfile:
    #            path: "{{ playbook_dir }}/msg_temp"
    #            line: "{{ ansible_hostname }} You not select any extension so Extension is disabled"
    #            create: yes
    #          delegate_to: localhost
    #          when: extension_values == ""
    #        - lineinfile:
    #            path: "{{ playbook_dir }}/msg_temp"
    #            line: "{{ ansible_hostname }} Extension '{{ extension_values }}' enabled."
    #            create: yes
    #          delegate_to: localhost
    #          when: extension_values != ""
    #      when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' ) and extensions_changed_changed is defined and extensions_changed_changed.skipped is not defined and found_files.matched != 0
    #    - block:
    #        - lineinfile:
    #            path: "{{ playbook_dir }}/msg_temp"
    #            line: "{{ ansible_hostname }} Extension '{{ extension_values }}' NOT  enabled, apmia is installed."
    #            create: yes
    #          delegate_to: localhost
    #          when: extension_values != ""
    #      when: enable_disable_extension.user_input|lower is search( '^yes$|^y$' ) and extensions_changed_changed is defined and extensions_changed_changed.skipped is defined and found_files.matched != 0
    ###################################################################################################
    - shell: './APMIACtrl.sh force_start 2>&1 &'
      args:
        chdir: "{{ path_linux }}/apmia/"
      register: outp_linux
      when: st_linux_script.stat.exists == true
    - wait_for: timeout=5
    - set_fact:
         outp_linux1: "{{ outp_linux.stdout | replace('To stop force_start use ctrl+c','To stop force_start go with force_stop') }}"
      when: outp_linux.skipped is not defined and outp_linux | succeeded and 'To stop force_start use ctrl+c' in outp_linux.stdout
    - set_fact:
         outp_linux: {"stdout":"{{ outp_linux1 }}"}
      when: outp_linux.skipped is not defined and outp_linux | succeeded and 'To stop force_start use ctrl+c' in outp_linux.stdout
    - set_fact:
         outp_linux: "{{ outp_linux | from_yaml }}"
      when: outp_linux.skipped is not defined and outp_linux | succeeded and 'To stop force_start use ctrl+c' in outp_linux.stdout

    - block:
        - shell: './APMIACtrl.sh force_start'
          args:
            chdir: "{{ path_linux }}/apmia/"
          register: outp_linux_1
          when: st_linux_script.stat.exists == true
          async: 9999999999999999990
          poll: 0
      when: outp_linux | success and st_linux_script.stat.exists == true

    #################################################Printing Message for Extra Properties###########################################################
    #- lineinfile:
    #       path: "{{ playbook_dir }}/msg_temp"
    #       line: "{{ ansible_hostname }} Extra property {{ interscope_property_extra_value }} have set"
    #       create: yes
    #  delegate_to: localhost
    #  when: found_files.matched != 0 and interscope_property_extra.user_input|lower is search( '^yes$|^y$' ) and interscope_property_extra_value !=""  and outp_linux|succeeded and 'APM Infrastructure Agent Force Start in Progress' in outp_linux.stdout and 'APM Infrastructure Agent in force_start mode' not in outp_linux.stdout
    #####################################################################################################################################

    - name: Checking Status of apmia directory
      stat:
        path: "{{ path_linux }}/apmia"
      register: st_linux_dir

    # Setting fact to print message, if apmia package is not present
    - set_fact:
         outp_linux: '{"stdout": "APMIA tar.gz/tar package is not present in directory files/unix"}'
      when: found_files.matched == 0
    - set_fact:
         outp_linux: "{{ outp_linux | from_json }}"
      when: found_files.matched == 0
    - set_fact:
         st_linux_dir: '{"stat": {"exists": "True"}}'
      when: found_files.matched == 0
    - set_fact:
         st_linux_dir: "{{ st_linux_dir | from_json }}"
      when: found_files.matched == 0
  when: ansible_os_family == "RedHat" or  ansible_os_family == "Suse" or ansible_os_family == "Debian" #Condition check for Linux systems
  become: true #For sudo user
#############################################################################################################################################

########################################Tasks to generate Report###################################################################
- name: Block for Report
  block:
    # Generating report on behalf of jinja2 template
    - template:
         src: ../template/report.j2
         dest: "{{ playbook_dir }}/report.log"
      delegate_to: localhost
#########################################################################################################################################
